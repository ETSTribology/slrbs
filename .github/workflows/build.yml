name: Build & Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        include:
          - os: windows-latest
            cc: cl
            cxx: cl
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: macos-latest
            cc: clang
            cxx: clang++

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.23.6'

      # Note: Using seanmiddleditch/gha-setup-ninja instead of actions/setup-ninja
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4
        with:
          version: '1.11.1'

      - name: Install ccache
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y ccache

      - name: Cache CPM
        uses: actions/cache@v4
        with:
          path: ./.cmake/CPM_*
          key: ${{ runner.os }}-cpm-${{ hashFiles('**/cmake/CPMRecipe_*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-cpm-

      - name: Cache LibTorch
        uses: actions/cache@v4
        with:
          path: libtorch
          key: ${{ runner.os }}-libtorch-2.0.1-${{ matrix.build_type }}

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y \
            libopencv-dev libgl1-mesa-dev xorg-dev \
            libxinerama-dev libxcursor-dev libxi-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update && brew install opencv@4 eigen glm

      - name: Bootstrap vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg ${{ env.VCPKG_ROOT }}
          cd ${{ env.VCPKG_ROOT }}
          ./bootstrap-vcpkg.bat
          ./vcpkg install glm eigen3
        shell: cmd

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DUSE_OPENCV=OFF \
            -DUSE_TORCH=OFF \
            -DUSE_PYBIND=OFF \
            -DUSE_CCACHE=ON \
            ${VCPKG_ROOT:+-DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake}
        shell: bash

      - name: Build
        run: |
          cd build
          cmake --build . --config ${{ matrix.build_type }} --parallel
        shell: bash

      - name: Run tests
        run: |
          cd build
          ctest -C ${{ matrix.build_type }} --output-on-failure
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: slrbs-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/slrbs*
            build/*/slrbs*
            build/*/*/slrbs*
          if-no-files-found: ignore