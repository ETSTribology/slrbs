name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows MSVC",
              os: windows-latest,
              build_type: "Debug",
              cc: "cl", cxx: "cl"
            }
          - {
              name: "Ubuntu GCC",
              os: ubuntu-latest,
              build_type: "Debug",
              cc: "gcc", cxx: "g++"
            }
          - {
              name: "Ubuntu Clang",
              os: ubuntu-latest,
              build_type: "Release",
              cc: "clang", cxx: "clang++"
            }
          - {
              name: "macOS Clang",
              os: macos-latest,
              build_type: "Debug",
              cc: "clang", cxx: "clang++"
            }

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.11.0

      - name: Install Qt (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev qtbase5-dev

      - name: Install Qt (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install qt@5

      - name: Install Qt (Windows)
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          modules: 'core gui opengl'

      - name: Fix C++ Reference Errors
        run: |
          # Create a helper script that will fix the C++ reference errors
          cat > fix_reference_errors.sh << 'EOF'
          #!/bin/bash
          
          # Fix SolverConjGradient.cpp
          find . -name "SolverConjGradient.cpp" -type f -exec sed -i.bak 's/multAndSub(j->J0Minv, j->body0->f, j->body0->tau, h, b.segment(j->idx, j->dim));/auto \&segment1 = b.segment(j->idx, j->dim);\n            multAndSub(j->J0Minv, j->body0->f, j->body0->tau, h, segment1);/g' {} \;
          find . -name "SolverConjGradient.cpp" -type f -exec sed -i.bak 's/multAndSub(j->J0, j->body0->xdot, j->body0->omega, 1.0f, b.segment(j->idx, j->dim));/auto \&segment2 = b.segment(j->idx, j->dim);\n            multAndSub(j->J0, j->body0->xdot, j->body0->omega, 1.0f, segment2);/g' {} \;
          find . -name "SolverConjGradient.cpp" -type f -exec sed -i.bak 's/multAndSub(j->J1Minv, j->body1->f, j->body1->tau, h, b.segment(j->idx, j->dim));/auto \&segment3 = b.segment(j->idx, j->dim);\n            multAndSub(j->J1Minv, j->body1->f, j->body1->tau, h, segment3);/g' {} \;
          find . -name "SolverConjGradient.cpp" -type f -exec sed -i.bak 's/multAndSub(j->J1, j->body1->xdot, j->body1->omega, 1.0f, b.segment(j->idx, j->dim));/auto \&segment4 = b.segment(j->idx, j->dim);\n            multAndSub(j->J1, j->body1->xdot, j->body1->omega, 1.0f, segment4);/g' {} \;
          
          # Fix SolverConjResidual.cpp
          find . -name "SolverConjResidual.cpp" -type f -exec sed -i.bak 's/multAndSub(j->J0Minv, j->body0->f, j->body0->tau, h, b.segment(j->idx, j->dim));/auto \&segment1 = b.segment(j->idx, j->dim);\n            multAndSub(j->J0Minv, j->body0->f, j->body0->tau, h, segment1);/g' {} \;
          find . -name "SolverConjResidual.cpp" -type f -exec sed -i.bak 's/multAndSub(j->J0, j->body0->xdot, j->body0->omega, 1.0f, b.segment(j->idx, j->dim));/auto \&segment2 = b.segment(j->idx, j->dim);\n            multAndSub(j->J0, j->body0->xdot, j->body0->omega, 1.0f, segment2);/g' {} \;
          find . -name "SolverConjResidual.cpp" -type f -exec sed -i.bak 's/multAndSub(j->J1Minv, j->body1->f, j->body1->tau, h, b.segment(j->idx, j->dim));/auto \&segment3 = b.segment(j->idx, j->dim);\n            multAndSub(j->J1Minv, j->body1->f, j->body1->tau, h, segment3);/g' {} \;
          find . -name "SolverConjResidual.cpp" -type f -exec sed -i.bak 's/multAndSub(j->J1, j->body1->xdot, j->body1->omega, 1.0f, b.segment(j->idx, j->dim));/auto \&segment4 = b.segment(j->idx, j->dim);\n            multAndSub(j->J1, j->body1->xdot, j->body1->omega, 1.0f, segment4);/g' {} \;
          EOF
          
          chmod +x fix_reference_errors.sh
          ./fix_reference_errors.sh

      - name: Update CMake to Find Qt
        run: |
          # Create a helper script to update CMakeLists.txt
          cat > update_cmake.sh << 'EOF'
          #!/bin/bash
          
          # Add Qt find_package and linking to CMakeLists.txt
          sed -i.bak '/find_package(OpenGL REQUIRED)/a find_package(Qt5 COMPONENTS Core Gui OpenGL REQUIRED)' CMakeLists.txt
          sed -i.bak '/target_link_libraries(slrbs PRIVATE/a \ \ Qt5::Core\n  Qt5::Gui\n  Qt5::OpenGL' CMakeLists.txt
          EOF
          
          chmod +x update_cmake.sh
          ./update_cmake.sh

      - name: Configure CMake
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}

      - name: Build
        shell: bash
        run: |
          cd build
          cmake --build . --config ${{ matrix.config.build_type }}

      - name: Test
        shell: bash
        run: |
          cd build
          ctest --output-on-failure -C ${{ matrix.config.build_type }}
        continue-on-error: true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: slrbs-${{ matrix.config.os }}-${{ matrix.config.build_type }}
          path: |
            build/slrbs*
            build/*/slrbs*
            build/*/*/slrbs*
          if-no-files-found: ignore